{"version":3,"sources":["components/userForm.js","serviceWorker.js","index.js"],"names":["LoginForm","e","preventDefault","name","document","getElementById","value","email","password","onBoarding_as","console","log","userObject","axios","post","then","res","data","catch","error","reset","Grid","textAlign","style","height","verticalAlign","Column","maxWidth","Header","as","color","Form","size","onSubmit","this","handleSubmit","bind","method","Segment","stacked","Input","fluid","icon","iconPosition","placeholder","id","type","Button","Message","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"+TA2EeA,E,2KApEAC,GACLA,EAAEC,iBACF,IAAMC,EAAOC,SAASC,eAAe,QAAQC,MACvCC,EAAQH,SAASC,eAAe,SAASC,MACzCE,EAAWJ,SAASC,eAAe,YAAYC,MAC/CG,EAAgBL,SAASC,eAAe,iBAAiBC,MAC/DI,QAAQC,IAAIR,EAAOK,EAAUD,EAAQE,GACrC,IAAMG,EAAa,CAACT,KAAKA,EAAKI,MAAMA,EAAMC,SAASA,EAASC,cAAcA,GAE1EI,IAAMC,KAAK,8BAA+B,CAACF,eACzCG,MAAK,SAACC,GACHN,QAAQC,IAAIK,EAAIC,SACjBC,OAAM,SAACC,GACNT,QAAQC,IAAIQ,Q,kCAIdf,SAASC,eAAe,gBAAgBe,U,+BAMjD,OAAO,kBAACC,EAAA,EAAD,CAAMC,UAAU,SAASC,MAAO,CAAEC,OAAQ,SAAWC,cAAc,UACxE,kBAACJ,EAAA,EAAKK,OAAN,CAAaH,MAAO,CAAEI,SAAU,MAC9B,kBAACC,EAAA,EAAD,CAAQC,GAAG,KAAKC,MAAM,QAAQR,UAAU,UAAxC,2BAGA,kBAACS,EAAA,EAAD,CAAMC,KAAK,QAAQC,SAAUC,KAAKC,aAAaC,KAAKF,MAAOG,OAAO,QAChE,kBAACC,EAAA,EAAD,CAASC,SAAO,GAChB,kBAACR,EAAA,EAAKS,MAAN,CACEC,OAAK,EACLC,KAAK,OACLC,aAAa,OACbC,YAAY,OACbC,GAAI,SAEH,kBAACd,EAAA,EAAKS,MAAN,CAAYC,OAAK,EAACC,KAAK,OAAOC,aAAa,OAAOC,YAAY,iBAAiBC,GAAG,UAClF,kBAACd,EAAA,EAAKS,MAAN,CACEC,OAAK,EACLC,KAAK,OACLC,aAAa,OACbC,YAAY,WACZE,KAAK,WACLD,GAAG,aAEL,kBAACd,EAAA,EAAKS,MAAN,CACEC,OAAK,EACLC,KAAK,OACLC,aAAa,OACbC,YAAY,iBAEZC,GAAG,kBAEL,kBAACE,EAAA,EAAD,CAAQjB,MAAM,QAAQW,OAAK,EAACT,KAAK,SAAjC,WAKJ,kBAACgB,EAAA,EAAD,gD,GA7DgBC,IAAMC,WCOVC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFtD,SAASC,eAAe,SDwHpB,kBAAmBsD,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEd7C,OAAM,SAAAC,GACLT,QAAQS,MAAMA,EAAM6C,c","file":"static/js/main.be6e145e.chunk.js","sourcesContent":["import React from 'react'\r\nimport axios from 'axios';\r\nimport { Button, Form, Grid, Header, Message, Segment} from 'semantic-ui-react'\r\n\r\n\r\nclass LoginForm extends React.Component {\r\n\r\n  handleSubmit(e){\r\n          e.preventDefault();\r\n          const name = document.getElementById('name').value;\r\n          const email = document.getElementById('email').value;\r\n          const password = document.getElementById('password').value;\r\n          const onBoarding_as = document.getElementById('onBoarding_as').value;\r\n          console.log(name , password, email , onBoarding_as);\r\n          const userObject = {name:name,email:email,password:password,onBoarding_as:onBoarding_as}\r\n\r\n          axios.post('http://localhost:5000/Users', {userObject})\r\n           .then((res) => {\r\n               console.log(res.data)\r\n           }).catch((error) => {\r\n               console.log(error)\r\n           });\r\n      }\r\n      resetForm(){\r\n             document.getElementById('contact-form').reset();\r\n         }\r\n\r\n  render(){\r\n\r\n\r\n    return(<Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\r\n      <Grid.Column style={{ maxWidth: 450 }}>\r\n        <Header as='h2' color='black' textAlign='center'>\r\n           Register to Naya Studio\r\n        </Header>\r\n        <Form size='large' onSubmit={this.handleSubmit.bind(this)} method='POST'>\r\n          <Segment stacked>\r\n          <Form.Input\r\n            fluid\r\n            icon='user'\r\n            iconPosition='left'\r\n            placeholder='name'\r\n           id ='name'\r\n          />\r\n            <Form.Input fluid icon='user' iconPosition='left' placeholder='E-mail address' id='email'/>\r\n            <Form.Input\r\n              fluid\r\n              icon='lock'\r\n              iconPosition='left'\r\n              placeholder='Password'\r\n              type='password'\r\n              id='password'\r\n            />\r\n            <Form.Input\r\n              fluid\r\n              icon='lock'\r\n              iconPosition='left'\r\n              placeholder='what are you ?'\r\n\r\n              id='onBoarding_as'\r\n            />\r\n            <Button color='black' fluid size='large'>\r\n              Login\r\n            </Button>\r\n          </Segment>\r\n        </Form>\r\n        <Message>\r\n          What are you designing for today?\r\n        </Message>\r\n      </Grid.Column>\r\n    </Grid>)\r\n  }\r\n\r\n}\r\n\r\nexport default LoginForm\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import 'semantic-ui/dist/semantic.min.css';\nimport './index.css';\nimport App from './components/userForm.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}